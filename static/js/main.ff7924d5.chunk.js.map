{"version":3,"sources":["app/actions/actions.js","app/components/Panel.js","app/constants/constants.js","app/components/Board.js","App.js","app/store/reducers/board.js","app/utils/utils.js","app/store/reducers/locations.js","app/store/reducers/steps.js","app/store/reducers/game.js","app/store/reducers/index.js","app/store/index.js","serviceWorker.js","index.js"],"names":["MOVE","Panel","this","props","over","steps","id","React","Component","connect","state","game","DIRECTIONS","KEYS","Board","length","me","board","rowIndex","row","colIndex","push","locations","mushrooms","mushroomLocation","col","visible","player","map","index","className","key","value","getClassName","move","document","onkeydown","event","dispatch","direction","type","App","initialized","input","prompt","Number","parseInt","isNaN","alert","window","location","reload","init","boardLength","initialState","action","generateLocations","max","LIMIT","set","Set","size","number","Math","floor","random","add","Array","from","values","result","closest","center","minDistance","Infinity","currentDistance","locationA","locationB","closestToCenter","isValid","boardState","_locations","forEach","mushroom","newRow","newCol","every","store","createStore","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ff7924d5.chunk.js","sourcesContent":["export const INIT = 'INIT';\nexport const MOVE = 'MOVE';\n\nexport const init = length => {\n    return {\n        type: INIT,\n        length\n    };\n};\n\nexport const move = direction => {\n    return {\n        type: MOVE,\n        direction\n    };\n};","import React from 'react';\nimport { connect } from 'react-redux';\n\nclass Panel extends React.Component {\n    render() {\n        let { over, steps } = this.props;\n        return <div id='panel'>\n            <div><h2>Use the arrow keys to play. Collect all the sprites.</h2></div>\n            <div id='steps'><h2>steps: {steps}</h2></div>\n            <div id='game-over'><h1>{over ? 'Game Over' : ''}</h1></div>\n        </div>;\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        over: state.game.over,\n        steps: state.steps\n    };\n}\nexport default connect(mapStateToProps)(Panel);","export const EMPTY = 'EMPTY';\nexport const PLAYER = 'PLAYER';\nexport const MUSHROOM = 'MUSHROOM';\nexport const DIRECTIONS = {\n    LEFT: 'LEFT',\n    RIGHT: 'RIGHT',\n    UP: 'UP',\n    DOWN: 'DOWN'\n};\nexport const KEYS = {\n    LEFT: 'ArrowLeft',\n    RIGHT: 'ArrowRight',\n    UP: 'ArrowUp',\n    DOWN: 'ArrowDown'\n}\n\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { PLAYER, MUSHROOM, EMPTY, KEYS, DIRECTIONS } from './../constants/constants';\nimport { move } from './../actions/actions';\n\nclass Board extends React.Component {\n\n    render() {\n        let { length } = this.props;\n        let me = this;\n        let board = [];\n\n        for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n            let row = [];\n            for (let colIndex = 0; colIndex < length; colIndex++) {\n                row.push(EMPTY);\n            }\n            board.push(row);\n        }\n\n        let locations = this.props.locations;\n\n        for (let mushroomLocation of locations.mushrooms) {\n            let { row, col, visible } = mushroomLocation;\n            if (visible) {\n                board[row][col] = MUSHROOM;\n            }\n        }\n        let { row, col } = locations.player;\n        board[row][col] = PLAYER;\n\n        return board.map(function (row, index) {\n            return (<div className='row' key={index}>\n                {row.map(function (value, rowIndex) {\n                    return <div className={me.getClassName(value)} key={rowIndex}></div>;\n                })}\n            </div>);\n        });\n    }\n    componentDidMount() {\n        let { move } = this.props;\n        document.onkeydown = function (event) {\n            switch (event.key) {\n                case KEYS.UP: move(DIRECTIONS.UP); break;\n                case KEYS.DOWN: move(DIRECTIONS.DOWN); break;\n                case KEYS.LEFT: move(DIRECTIONS.LEFT); break;\n                case KEYS.RIGHT: move(DIRECTIONS.RIGHT); break;\n                default: break;\n            }\n        }\n    }\n    getClassName(value) {\n        switch (value) {\n            case PLAYER: return 'square player';\n            case MUSHROOM: return 'square mushroom';\n            default: return 'square';\n        }\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        locations: state.locations\n    };\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        move: direction => dispatch(move(direction))\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);","import React from 'react';\r\nimport './App.css';\r\nimport { connect } from 'react-redux';\r\nimport { init } from './app/actions/actions';\r\nimport Panel from './app/components/Panel';\r\nimport Board from './app/components/Board';\r\n\r\nclass App extends React.Component {\r\n    render() {\r\n        let { initialized, length } = this.props;\r\n        return (\r\n            <div className=\"App\">\r\n                {initialized ? <Board length={length} /> : <div />}\r\n                <Panel />\r\n            </div>\r\n        );\r\n    }\r\n    componentDidMount() {\r\n        let input = prompt('Enter board length: ');\r\n        var length = Number.parseInt(input);\r\n        if (!Number.isNaN(length)) {\r\n            if (length < 3) {\r\n                alert('Length too small');\r\n                window.location.reload();\r\n            } else if (length > 20) {\r\n                alert('Length too big');\r\n                window.location.reload();\r\n            } else {\r\n                this.props.init(length);\r\n            } \r\n        } else {\r\n            alert('Enter a valid number.');\r\n            window.location.reload();\r\n        }\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    let { initialized, length } = state.board;\r\n    return {\r\n        initialized,\r\n        length\r\n    };\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        init: boardLength => dispatch(init(boardLength))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { INIT } from './../../actions/actions';\n\nlet initialState = {\n    initialized: false,\n    length: null\n}\n\nconst board = (board = initialState, action) => {\n    switch (action.type) {\n        case INIT: return {\n            initialized: true,\n            length: action.length\n        }         \n    }\n    return board;\n}\n\nexport default board;","function getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport function generateLocations(boardLength) {\n    const LIMIT = boardLength ** 2;\n    let set = new Set();\n\n    while (set.size < boardLength + 1) {\n        let number = getRandomInt(LIMIT);\n        set.add(number);\n    }\n\n    let locations = Array.from(set.values()).map(value => {\n        return {\n            row: Math.floor(value / boardLength),\n            col: value % boardLength\n        };\n    });\n    let result = {\n        mushrooms: [],\n        player: null\n    };\n    let closest = closestToCenter(locations, boardLength);\n    result.player = closest;\n\n    for (let location of locations) {\n        if (closest !== location) {\n            result.mushrooms.push(location);\n        }\n    }\n    return result;\n}\n\nfunction closestToCenter(locations, boardLength) {\n    let center = {\n        row: Math.floor(boardLength / 2),\n        col: Math.floor(boardLength / 2)\n    };\n    let closest;\n    let minDistance = Infinity;\n\n    for (let location of locations) {\n        let currentDistance = distance(location, center);\n        if (currentDistance < minDistance) {\n            minDistance = currentDistance;\n            closest = location;\n        }\n    }\n    return closest;\n}\n\nfunction distance(locationA, locationB) {\n    return (locationB.col - locationA.col) ** 2 + (locationB.row - locationA.row) ** 2;\n}","import { DIRECTIONS } from '../../constants/constants';\nimport { INIT, MOVE } from './../../actions/actions';\nimport { generateLocations } from './../../utils/utils';\n\nlet initialState = {};\n\nconst locations = (state = initialState, action, boardState) => {\n    switch (action.type) {\n        case INIT: {\n            let _locations = generateLocations(action.length);\n            _locations.mushrooms.forEach(mushroom => {\n                mushroom.visible = true;\n            });\n            return _locations;\n        }\n        case MOVE: {\n            let { direction } = action;\n            let { row, col } = state.player;\n            switch (direction) {\n                case DIRECTIONS.UP: {\n                    var newRow = row - 1, newCol = col;\n                } break;\n                case DIRECTIONS.DOWN: {\n                    var newRow = row + 1, newCol = col;\n                } break;\n                case DIRECTIONS.LEFT: {\n                    var newRow = row, newCol = col - 1;\n                } break;\n                case DIRECTIONS.RIGHT: {\n                    var newRow = row, newCol = col + 1;\n                } break;\n            }\n            if (isValid(newRow, newCol, boardState.length)) {\n                for (let mushroom of state.mushrooms) {\n                    if (mushroom.row === newRow && mushroom.col === newCol) {\n                        mushroom.visible = false;\n                    }\n                }\n                return {\n                    ...state,\n                    player: {\n                        row: newRow,\n                        col: newCol\n                    }\n                };\n            }\n        }\n    }\n    return state;\n}\n\nfunction isValid(row, col, boardLength) {\n    return 0 <= row && row < boardLength && 0 <= col && col < boardLength;\n}\nexport default locations;","import { MOVE } from './../../actions/actions';\n\nlet initialState = 0;\n\nconst steps = (state = initialState, action) => {\n    switch(action.type) {\n        case MOVE: return state + 1;\n    }\n    return state;\n}\n\nexport default steps;","import { MOVE } from './../../actions/actions';\n\nlet initialState = {\n    over: false\n};\nconst game = (state = initialState, action, locations) => {\n    switch(action.type) {\n        case MOVE: {\n            return {\n                ...state,\n                over: locations.mushrooms.every(mushroom => !mushroom.visible)\n            };\n        }\n    }\n    return state;\n}\nexport default game;","import board from './board';\nimport locations from './locations';\nimport steps from './steps';\nimport game from './game';\n\nconst initialState = {\n    steps: 0,\n    locations: {\n        player: {\n            row: 0, col: 3\n        },\n        mushrooms: [{\n            row: 4, col: 3, visible: true\n        }],\n    },\n    board: {\n        initialized: false,\n        length: 10\n    },\n    game: {\n        over: false\n    }\n};\n\nexport default function rootReducer(state = initialState, action) {\n    return {\n        board: board(state.board, action),\n        locations: locations(state.locations, action, state.board),\n        steps: steps(state.steps, action),\n        game: game(state.game, action, state.locations)\n    };\n}\n\n","import rootReducer from './reducers';\nimport { createStore } from 'redux';\n\nlet store = createStore(rootReducer);\n\nexport default store;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store/index.js';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}